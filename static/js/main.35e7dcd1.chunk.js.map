{"version":3,"sources":["TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoList","props","useState","title","setTitle","error","setError","addTask","trim","id","onClick","removeTodoList","placeholder","value","onChange","e","currentTarget","onKeyPress","key","className","tasks","map","t","isDone","type","changeTaskStatus","checked","removeTask","filter","changeFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","todoListID","todoListTasks","task","todoList","find","tl","changeStatus","taskID","allTodoListTasks","tasksForTodoList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35e7dcd1.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {filterValuesType} from \"./App\";\r\n\r\nexport type taskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype propsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<taskType>\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeFilter: (value: filterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    filter: filterValuesType\r\n    removeTodoList: (todoListID: string) => void\r\n}\r\n\r\nexport function TodoList(props: propsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<null | string>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addTask(title.trim(), props.id)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            addTask()\r\n        }\r\n    }\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id)\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id)\r\n\r\n    const onRemoveTodoList = () => props.removeTodoList(props.id)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}\r\n                <button onClick={onRemoveTodoList}>x</button>\r\n            </h3>\r\n            <div>\r\n                <input placeholder={'Add a new item...'}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       className={error ? \"error\" : \"\"}\r\n                />\r\n                <button onClick={addTask}>+</button>\r\n                {error && <div className={\"error-message\"}>{error}</div>}\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n\r\n                        const onRemoveHandler = () => props.removeTask(t.id, props.id)\r\n                        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id);\r\n                        }\r\n\r\n                        return <li className={t.isDone ? \"is-done\" : \"\"} key={t.id}><input type=\"checkbox\"\r\n                                                                                           onChange={onChangeHandler}\r\n                                                                                           checked={t.isDone}/>\r\n                            <span>{t.title}</span>\r\n                            <button onClick={onRemoveHandler}>x</button>\r\n                        </li>\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === \"all\" ? \"active-filter\" : \"\"}\r\n                        onClick={onAllClickHandler}>\r\n                    All\r\n                </button>\r\n                <button className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                        onClick={onActiveClickHandler}>\r\n                    Active\r\n                </button>\r\n                <button className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                        onClick={onCompletedClickHandler}>\r\n                    Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {useState} from \"react\";\nimport \"./App.css\";\nimport {taskType, TodoList} from \"./TodoList\";\nimport {v1} from \"uuid\";\n\nexport type filterValuesType = \"all\" | \"active\" | \"completed\";\n\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: filterValuesType\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<taskType>\n}\n\nfunction App() {\n\n    const todoListID_1 = v1();\n    const todoListID_2 = v1();\n\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\n        { id: todoListID_1, title: \"What to learn\", filter: \"all\" },\n        { id: todoListID_2, title: \"What to buy\", filter: \"all\" }\n    ]);\n\n    let [tasks, setTasks] = useState<TasksStateType>({\n        [todoListID_1]: [\n            {id: v1(), title: \"HTML/CSS\", isDone: true },\n            {id: v1(), title: \"JS\", isDone: false }\n        ],\n        [todoListID_2]: [\n            {id: v1(), title: \"Milk\", isDone: false },\n            {id: v1(), title: \"Beer\", isDone: true }\n        ]\n    })\n\n    function removeTask(id: string, todoListID: string) {\n        let todoListTasks = tasks[todoListID]\n        tasks[todoListID] = todoListTasks.filter(t => t.id !== id)\n        setTasks({...tasks})\n    }\n\n    function addTask(title: string, todoListID: string) {\n        let task = {id: v1(), title: title, isDone: false}\n        let todoListTasks = tasks[todoListID]\n        tasks[todoListID] = [task, ...todoListTasks]\n        setTasks({...tasks})\n    }\n\n    function changeFilter(value: filterValuesType, todoListID: string) {\n        let todoList =todoLists.find(tl => tl.id === todoListID);\n        if(todoList) {\n            todoList.filter = value\n            setTodoLists([...todoLists])\n        }\n    }\n\n    function changeStatus(taskID: string, isDone: boolean, todoListID: string) {\n        let todoListTasks = tasks[todoListID]\n        let task = todoListTasks.find(t => t.id === taskID)\n        if (task) {\n            task.isDone = isDone\n            setTasks({...tasks})\n        }\n\n    }\n\n    function removeTodoList(id: string) {\n        setTodoLists(todoLists.filter(tl => tl.id !== id))\n        delete tasks[id]\n        setTasks({...tasks})\n    }\n\n    return (\n        <div className=\"App\">\n            {\n                todoLists.map(tl => {\n                    let allTodoListTasks = tasks[tl.id]\n                    let tasksForTodoList = allTodoListTasks\n\n                    if(tl.filter === \"active\") {\n                        tasksForTodoList = allTodoListTasks.filter(t => t.isDone === false)\n                    }\n                    if(tl.filter === \"completed\") {\n                        tasksForTodoList = allTodoListTasks.filter(t => t.isDone === true)\n                    }\n\n                    return <TodoList\n                        id={tl.id}\n                        key={tl.id}\n                        title={tl.title}\n                        tasks={tasksForTodoList}\n                        removeTask={removeTask}\n                        changeFilter={changeFilter}\n                        addTask={addTask}\n                        changeTaskStatus={changeStatus}\n                        filter={tl.filter}\n                        removeTodoList={removeTodoList}\n                    />\n                })\n            }\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}