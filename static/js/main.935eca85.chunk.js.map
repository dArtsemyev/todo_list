{"version":3,"sources":["AddNewItem.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddNewItem","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","size","label","value","onChange","e","currentTarget","onKeyPress","key","helperText","Button","color","style","marginLeft","onClick","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","TodoList","newTitle","changeTodoListTitle","id","IconButton","removeTodoList","Delete","addTask","tasks","map","t","className","isDone","Checkbox","changeTaskStatus","checked","newValue","changeTaskTitle","removeTask","marginRight","filter","changeFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","todoListID","todoListTasks","task","todoList","find","tl","changeStatus","taskID","todolist","todoListComponents","tasksForTodoList","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","newTodoListID","newTodolist","spacing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.935eca85.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\ntype AddNewItemPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddNewItem(props: AddNewItemPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<null | string>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant={\"outlined\"}\r\n                       size={\"small\"}\r\n                       label={\"Add a new item...\"}\r\n                       //placeholder={'Add a new item...'}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       //className={error ? \"error\" : \"\"}\r\n                helperText={error}\r\n            />\r\n            <Button variant={\"contained\"} size=\"small\" color={\"primary\"} style={{marginLeft: \"5px\"}} onClick={addItem}>+</Button>\r\n            {/*{error && <div className={\"error-message\"}>{error}</div>}*/}\r\n        </div>\r\n    )\r\n\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                color={\"primary\"}\r\n                variant={\"standard\"}\r\n                value={title}\r\n                onBlur={activateViewMode}\r\n                autoFocus\r\n                onChange={onChangeTitleHandler}/>\r\n\r\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {filterValuesType} from \"./App\";\r\nimport {AddNewItem} from \"./AddNewItem\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type taskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype propsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<taskType>\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeFilter: (value: filterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n    filter: filterValuesType\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport function TodoList(props: propsType) {\r\n\r\n    const addTask = (title: string) => props.addTask(title, props.id)\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id)\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id)\r\n    const onRemoveTodoList = () => props.removeTodoList(props.id)\r\n    const ChangeTodoListTitle = (newTitle: string) => {\r\n        props.changeTodoListTitle(props.id, newTitle)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={ChangeTodoListTitle}/>\r\n                <IconButton onClick={onRemoveTodoList}><Delete/></IconButton>\r\n            </h3>\r\n            <AddNewItem addItem={addTask}/>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n\r\n                        const onRemoveHandler = () => props.removeTask(t.id, props.id)\r\n                        const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id);\r\n                        }\r\n                        const onChangeTitleHandler = (newValue: string) => {\r\n                            props.changeTaskTitle(t.id, newValue, props.id);\r\n                        }\r\n\r\n\r\n                        return <li className={t.isDone ? \"is-done\" : \"\"} key={t.id}>\r\n                            <Checkbox\r\n                                color={\"primary\"}\r\n                                onChange={onChangeStatusHandler}\r\n                                checked={t.isDone}\r\n                            />\r\n\r\n\r\n                            <EditableSpan title={t.title}\r\n                                          onChange={onChangeTitleHandler}/>\r\n\r\n                            <IconButton onClick={onRemoveHandler}>\r\n                                <Delete />\r\n                            </IconButton>\r\n                        </li>\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button style={{marginRight: \"5px\"}}\r\n                        size={\"small\"}\r\n                        color={\"primary\"}\r\n                        variant={props.filter === \"all\" ? \"outlined\" : \"contained\"}\r\n                    //className={props.filter === \"all\" ? \"active-filter\" : \"\"}\r\n                        onClick={onAllClickHandler}>All</Button>\r\n\r\n                <Button style={{marginRight: \"5px\"}}\r\n                        size={\"small\"}\r\n                        color={\"primary\"}\r\n                        variant={props.filter === \"active\" ? \"outlined\" : \"contained\"}\r\n                    //className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                        onClick={onActiveClickHandler}>Active</Button>\r\n\r\n                <Button style={{marginRight: \"5px\"}}\r\n                        size={\"small\"}\r\n                        color={\"primary\"}\r\n                        variant={props.filter === \"completed\" ? \"outlined\" : \"contained\"}\r\n                    //className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                        onClick={onCompletedClickHandler}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, {useState} from \"react\";\nimport \"./App.css\";\nimport {taskType, TodoList} from \"./TodoList\";\nimport {v1} from \"uuid\";\nimport {AddNewItem} from \"./AddNewItem\";\nimport {AppBar, Toolbar, Button, IconButton, Typography, Container, Grid, Paper} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\n\nexport type filterValuesType = \"all\" | \"active\" | \"completed\";\n\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: filterValuesType\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<taskType>\n}\n\nfunction App() {\n\n    const todoListID_1 = v1();\n    const todoListID_2 = v1();\n\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\n        {id: todoListID_1, title: \"What to learn\", filter: \"all\"},\n        {id: todoListID_2, title: \"What to buy\", filter: \"all\"}\n    ]);\n\n    let [tasks, setTasks] = useState<TasksStateType>({\n        [todoListID_1]: [\n            {id: v1(), title: \"HTML/CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: false}\n        ],\n        [todoListID_2]: [\n            {id: v1(), title: \"Milk\", isDone: false},\n            {id: v1(), title: \"Beer\", isDone: true}\n        ]\n    })\n\n    function removeTask(id: string, todoListID: string) {\n        let todoListTasks = tasks[todoListID]\n        tasks[todoListID] = todoListTasks.filter(t => t.id !== id)\n        setTasks({...tasks})\n    }\n\n    function addTask(title: string, todoListID: string) {\n        let task = {id: v1(), title: title, isDone: false}\n        let todoListTasks = tasks[todoListID]\n        tasks[todoListID] = [task, ...todoListTasks]\n        setTasks({...tasks})\n    }\n\n    function changeFilter(value: filterValuesType, todoListID: string) {\n        let todoList = todoLists.find(tl => tl.id === todoListID);\n        if (todoList) {\n            todoList.filter = value\n            setTodoLists([...todoLists])\n        }\n    }\n\n    function changeStatus(taskID: string, isDone: boolean, todoListID: string) {\n        let todoListTasks = tasks[todoListID]\n        let task = todoListTasks.find(t => t.id === taskID)\n        if (task) {\n            task.isDone = isDone\n            setTasks({...tasks})\n        }\n\n    }\n\n    function changeTaskTitle(taskID: string, newTitle: string, todoListID: string) {\n        let todoListTasks = tasks[todoListID]\n        let task = todoListTasks.find(t => t.id === taskID)\n        if (task) {\n            task.title = newTitle\n            setTasks({...tasks})\n        }\n    }\n\n    function removeTodoList(id: string) {\n        setTodoLists(todoLists.filter(tl => tl.id !== id))\n        delete tasks[id]\n        setTasks({...tasks})\n    }\n\n    function changeTodoListTitle(id: string, newTitle: string) {\n        const todolist = todoLists.find(tl => tl.id === id)\n        if (todolist) {\n            todolist.title = newTitle\n            setTodoLists([...todoLists])\n        }\n    }\n\n    function addTodoList(title: string) {\n        const newTodoListID = v1()\n        const newTodolist: TodoListType = {\n            id: newTodoListID, title, filter: \"all\"\n        }\n        setTodoLists([...todoLists, newTodolist])\n        setTasks({...tasks, [newTodoListID]: []})\n    }\n\n    const todoListComponents = todoLists.map(tl => {\n        let tasksForTodoList = tasks[tl.id]\n\n        if (tl.filter === \"active\") {\n            tasksForTodoList = tasksForTodoList.filter(t => !t.isDone)\n        }\n        if (tl.filter === \"completed\") {\n            tasksForTodoList = tasksForTodoList.filter(t => t.isDone)\n        }\n\n        return (\n            <Grid item key={tl.id}>\n                <Paper elevation={6} style={{padding: \"15px\"}}>\n                    <TodoList\n                        id={tl.id}\n                        title={tl.title}\n                        tasks={tasksForTodoList}\n                        removeTask={removeTask}\n                        changeFilter={changeFilter}\n                        addTask={addTask}\n                        changeTaskStatus={changeStatus}\n                        changeTaskTitle={changeTaskTitle}\n                        filter={tl.filter}\n                        removeTodoList={removeTodoList}\n                        changeTodoListTitle={changeTodoListTitle}/>\n                </Paper>\n            </Grid>\n        )\n    })\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar style={{justifyContent: \"space-between\"}}>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        TodoList\n                    </Typography>\n                    <Button variant={\"outlined\"} color=\"inherit\">\n                        Login\n                    </Button>\n                </Toolbar>\n            </AppBar>\n\n            <Container fixed>\n                <Grid container={true} style={{padding: \"20px 0px\"}}>\n                    <AddNewItem addItem={addTodoList}/>\n                </Grid>\n                <Grid container={true} spacing={2}>\n                    {\n                        todoListComponents\n                    }\n                </Grid>\n            </Container>\n\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}