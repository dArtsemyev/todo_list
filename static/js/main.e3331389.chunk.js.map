{"version":3,"sources":["AddNewItem.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddNewItem","props","useState","title","setTitle","error","setError","addItem","trim","placeholder","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","TodoList","newTitle","changeTodoListTitle","id","removeTodoList","addTask","tasks","map","t","isDone","type","changeTaskStatus","checked","newValue","changeTaskTitle","removeTask","filter","changeFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","todoListID","todoListTasks","task","todoList","find","tl","changeStatus","taskID","todolist","newTodoListID","newTodolist","tasksForTodoList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3331389.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype AddNewItemPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddNewItem(props: AddNewItemPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<null | string>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input placeholder={'Add a new item...'}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addItem}>+</button>\r\n            {error && <div className={\"error-message\"}>{error}</div>}\r\n        </div>\r\n    )\r\n\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input value={title}\r\n                     onBlur={activateViewMode}\r\n                     autoFocus\r\n                     onChange={onChangeTitleHandler}/>\r\n\r\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {filterValuesType} from \"./App\";\r\nimport {AddNewItem} from \"./AddNewItem\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\nexport type taskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype propsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<taskType>\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeFilter: (value: filterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n    filter: filterValuesType\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport function TodoList(props: propsType) {\r\n\r\n    const addTask = (title: string) => props.addTask(title, props.id)\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id)\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id)\r\n    const onRemoveTodoList = () => props.removeTodoList(props.id)\r\n    const ChangeTodoListTitle = (newTitle: string) => {\r\n        props.changeTodoListTitle(props.id, newTitle)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={ ChangeTodoListTitle }/>\r\n                <button onClick={onRemoveTodoList}>x</button>\r\n            </h3>\r\n            <AddNewItem addItem={addTask}/>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n\r\n                        const onRemoveHandler = () => props.removeTask(t.id, props.id)\r\n                        const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id);\r\n                        }\r\n                        const onChangeTitleHandler = (newValue: string) => {\r\n                            props.changeTaskTitle(t.id, newValue, props.id);\r\n                        }\r\n\r\n\r\n                        return <li className={t.isDone ? \"is-done\" : \"\"} key={t.id}>\r\n                            <input type=\"checkbox\" onChange={onChangeStatusHandler} checked={t.isDone}/>\r\n\r\n                            <EditableSpan title={t.title}\r\n                                          onChange={onChangeTitleHandler}/>\r\n\r\n                            <button onClick={onRemoveHandler}>x</button>\r\n                        </li>\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === \"all\" ? \"active-filter\" : \"\"}\r\n                        onClick={onAllClickHandler}>All</button>\r\n                <button className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                        onClick={onActiveClickHandler}>Active</button>\r\n                <button className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                        onClick={onCompletedClickHandler}>Completed</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, {useState} from \"react\";\nimport \"./App.css\";\nimport {taskType, TodoList} from \"./TodoList\";\nimport {v1} from \"uuid\";\nimport {AddNewItem} from \"./AddNewItem\";\n\nexport type filterValuesType = \"all\" | \"active\" | \"completed\";\n\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: filterValuesType\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<taskType>\n}\n\nfunction App() {\n\n    const todoListID_1 = v1();\n    const todoListID_2 = v1();\n\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\n        { id: todoListID_1, title: \"What to learn\", filter: \"all\" },\n        { id: todoListID_2, title: \"What to buy\", filter: \"all\" }\n    ]);\n\n    let [tasks, setTasks] = useState<TasksStateType>({\n        [todoListID_1]: [\n            {id: v1(), title: \"HTML/CSS\", isDone: true },\n            {id: v1(), title: \"JS\", isDone: false }\n        ],\n        [todoListID_2]: [\n            {id: v1(), title: \"Milk\", isDone: false },\n            {id: v1(), title: \"Beer\", isDone: true }\n        ]\n    })\n\n    function removeTask(id: string, todoListID: string) {\n        let todoListTasks = tasks[todoListID]\n        tasks[todoListID] = todoListTasks.filter(t => t.id !== id)\n        setTasks({...tasks})\n    }\n    function addTask(title: string, todoListID: string) {\n        let task = {id: v1(), title: title, isDone: false}\n        let todoListTasks = tasks[todoListID]\n        tasks[todoListID] = [task, ...todoListTasks]\n        setTasks({...tasks})\n    }\n    function changeFilter(value: filterValuesType, todoListID: string) {\n        let todoList =todoLists.find(tl => tl.id === todoListID);\n        if(todoList) {\n            todoList.filter = value\n            setTodoLists([...todoLists])\n        }\n    }\n    function changeStatus(taskID: string, isDone: boolean, todoListID: string) {\n        let todoListTasks = tasks[todoListID]\n        let task = todoListTasks.find(t => t.id === taskID)\n        if (task) {\n            task.isDone = isDone\n            setTasks({...tasks})\n        }\n\n    }\n    function changeTaskTitle(taskID: string, newTitle: string, todoListID: string) {\n        let todoListTasks = tasks[todoListID]\n        let task = todoListTasks.find(t => t.id === taskID)\n        if(task) {\n            task.title = newTitle\n            setTasks({...tasks})\n        }\n    }\n    function removeTodoList(id: string) {\n        setTodoLists(todoLists.filter(tl => tl.id !== id))\n        delete tasks[id]\n        setTasks({...tasks})\n    }\n\n    function changeTodoListTitle(id: string, newTitle: string) {\n        const todolist = todoLists.find(tl => tl.id === id)\n        if(todolist) {\n            todolist.title = newTitle\n            setTodoLists([...todoLists])\n        }\n    }\n\n    function addTodoList(title: string) {\n        const newTodoListID = v1()\n        const newTodolist: TodoListType = {\n            id: newTodoListID, title, filter: \"all\"\n        }\n        setTodoLists([...todoLists, newTodolist])\n        setTasks({...tasks, [newTodoListID]:[]})\n    }\n\n    return (\n        <div className=\"App\">\n            <AddNewItem addItem={addTodoList}/>\n            {\n                todoLists.map(tl => {\n                    let tasksForTodoList = tasks[tl.id]\n\n                    if(tl.filter === \"active\") {\n                        tasksForTodoList = tasksForTodoList.filter(t => !t.isDone)\n                    }\n                    if(tl.filter === \"completed\") {\n                        tasksForTodoList = tasksForTodoList.filter(t => t.isDone)\n                    }\n\n                    return <TodoList\n                        id={tl.id}\n                        key={tl.id}\n                        title={tl.title}\n                        tasks={tasksForTodoList}\n                        removeTask={removeTask}\n                        changeFilter={changeFilter}\n                        addTask={addTask}\n                        changeTaskStatus={changeStatus}\n                        changeTaskTitle={changeTaskTitle}\n                        filter={tl.filter}\n                        removeTodoList={removeTodoList}\n                        changeTodoListTitle={changeTodoListTitle}\n                    />\n                })\n            }\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}